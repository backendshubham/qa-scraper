[
  {
    "question": "Q. BST Iterator Problem Statement\nYou are tasked with creating a class named BSTIterator that acts as an iterator for the inorder traversal of a binary search tree. Implement the following functions:\nBSTIterator(...\nBSTIterator(...",
    "answer": "Create a BSTIterator class for inorder traversal of a binary search tree.\n\nImplement a constructor that takes the root of the binary search tree and initializes the iterator.\nImplement a constructor that takes the root of the binary search tree and initializes the iterator.\nImplement next() function to return the next smallest element in the inorder traversal.\nImplement next() function to return the next smallest element in the inorder traversal.\nImplement hasNext() function to check if there is a next element in the inorder traversal.\nImplement hasNext() function to check if there is a next element in the inorder traversal.\nTraverse the binary search tree in inorder to get the desired output.\nTraverse the binary search tree in inorder to get the desired output."
  },
  {
    "question": "Q. Cube Sum Pairs Problem Statement\nGiven a positive integer N, find the number of ways to express N as a sum of cubes of two integers, A and B, such that:\nN = A^3 + B^3\nEnsure you adhere to the following conditio...",
    "answer": "The problem involves finding the number of ways to express a given positive integer as a sum of cubes of two integers.\n\nIterate through all possible values of A and B within the given constraints.\nIterate through all possible values of A and B within the given constraints.\nCheck if A^3 + B^3 equals the given N, increment the count if true.\nCheck if A^3 + B^3 equals the given N, increment the count if true.\nHandle the case where A = B separately to avoid counting duplicates.\nHandle the case where A = B separately to avoid counting duplicates."
  },
  {
    "question": "Q. Majority Element Problem Statement\nGiven an array/list 'ARR' consisting of 'N' integers, your task is to find the majority element in the array. If there is no majority element present, return -1.",
    "answer": "Find the majority element in an array, return -1 if no majority element is present.\n\nIterate through the array and keep track of the count of each element using a hashmap.\nIterate through the array and keep track of the count of each element using a hashmap.\nCheck if any element's count is greater than floor(N / 2) and return it as the majority element.\nCheck if any element's count is greater than floor(N / 2) and return it as the majority element.\nIf no majority element is found, return -1.\nIf no majority element is found, return -1."
  },
  {
    "question": "Q. Colorful Knapsack Problem\nYou are given a set of 'N' stones, each with a specific weight and color. The goal is to fill a knapsack with exactly 'M' stones, choosing one stone of each color, so that the total we...",
    "answer": "The Colorful Knapsack Problem involves selecting one stone of each color to fill a knapsack with a given weight capacity, minimizing unused capacity.\n\nIterate through the stones and keep track of the minimum weight for each color.\nIterate through the stones and keep track of the minimum weight for each color.\nUse dynamic programming to find the optimal solution by considering all possible combinations.\nUse dynamic programming to find the optimal solution by considering all possible combinations.\nHandle cases where the knapsack cannot be filled under the given conditions by returning -1.\nHandle cases where the knapsack cannot be filled under the given conditions by returning -1.\nIn the given example, the optimal solution is to select stones wit...read more\nIn the given example, the optimal solution is to select stones wit...read more"
  },
  {
    "question": "Q. Find Row With Maximum 1's in a Sorted 2D Matrix\nYou are provided with a 2D matrix containing only the integers 0 or 1. The matrix has dimensions N x M, and each row is sorted in non-decreasing order. Your objec...",
    "answer": "Find the row with the maximum number of 1's in a sorted 2D matrix.\n\nIterate through each row of the matrix and count the number of 1's in each row.\nIterate through each row of the matrix and count the number of 1's in each row.\nKeep track of the row index with the maximum number of 1's encountered so far.\nKeep track of the row index with the maximum number of 1's encountered so far.\nReturn the index of the row with the maximum number of 1's.\nReturn the index of the row with the maximum number of 1's."
  },
  {
    "question": "Q. Rearrange Linked List Problem Statement\nGiven a singly linked list in the form 'L1' -> 'L2' -> 'L3' -> ... 'Ln', your task is to rearrange the nodes to the form 'L1' -> 'Ln' -> 'L2' -> 'Ln-1', etc. You must not...",
    "answer": "Rearrange the nodes of a singly linked list in a specific order without altering the data of the nodes.\n\nUse two pointers to split the linked list into two halves.\nUse two pointers to split the linked list into two halves.\nReverse the second half of the linked list.\nReverse the second half of the linked list.\nMerge the two halves alternately to rearrange the nodes.\nMerge the two halves alternately to rearrange the nodes.\nEnsure to handle cases with odd and even number of nodes separately.\nEnsure to handle cases with odd and even number of nodes separately.\nExample: For input 1 -> 2 -> 3 -> 4 -> 5, the output should be 1 -> 5 -> 2 -> 4 -> 3.\nExample: For input 1 -> 2 -> 3 -> 4 -> 5, the output should be 1 -> 5 -> 2 -> 4 -> 3."
  },
  {
    "question": "Q. Find Missing Number In String Problem Statement\nYou have a sequence of consecutive nonnegative integers. By appending all integers end-to-end, you formed a string S without any separators. During this process, ...",
    "answer": "Given a string of consecutive nonnegative integers without separators, find the missing integer.\n\nIterate through all possible splits of the string and check if the sequence is valid\nIterate through all possible splits of the string and check if the sequence is valid\nIf the sequence is valid, return the missing integer\nIf the sequence is valid, return the missing integer\nHandle cases where there are multiple missing integers or the string is invalid\nHandle cases where there are multiple missing integers or the string is invalid"
  },
  {
    "question": "Q. LRU Cache Design Question\nDesign a data structure for a Least Recently Used (LRU) cache that supports the following operations:\n1. get(key) - Return the value of the key if it exists in the cache; otherwise, re...",
    "answer": "Design a Least Recently Used (LRU) cache data structure that supports get and put operations with capacity constraint.\n\nImplement a doubly linked list to keep track of the order of keys based on their recent usage.\nImplement a doubly linked list to keep track of the order of keys based on their recent usage.\nUse a hashmap to store key-value pairs for quick access and update.\nUse a hashmap to store key-value pairs for quick access and update.\nWhen capacity is reached, evict the least recently used item before inserting a new item.\nWhen capacity is reached, evict the least recently used item before inserting a new item.\nUpdate the order of keys in the linked list whenever a key is accessed or updated.\nUpdate the order of keys in the linked list whenever a key is accessed or updated."
  },
  {
    "question": "Q. Integer to Roman Conversion\nGiven an integer N, convert it to its corresponding Roman numeral representation. Roman numerals comprise seven symbols: I, V, X, L, C, D, and M.\nN = 2\nII",
    "answer": "Convert an integer to its corresponding Roman numeral representation.\n\nCreate a mapping of integer values to Roman numeral symbols.\nCreate a mapping of integer values to Roman numeral symbols.\nIterate through the mapping in descending order of values and build the Roman numeral representation.\nIterate through the mapping in descending order of values and build the Roman numeral representation.\nSubtract the largest possible value from the integer at each step and append the corresponding Roman numeral symbol.\nSubtract the largest possible value from the integer at each step and append the corresponding Roman numeral symbol.\nRepeat until the integer becomes 0.\nRepeat until the integer becomes 0."
  },
  {
    "question": "Q. Palindrome Permutation - Problem Statement\nDetermine if a permutation of a given string S can form a palindrome.\nstring S = \"aab\"\n\"True\"\nThe permutation \"aba\" of the string ...",
    "answer": "Check if a permutation of a string can form a palindrome.\n\nCreate a frequency map of characters in the string.\nCreate a frequency map of characters in the string.\nCheck if at most one character has an odd frequency.\nCheck if at most one character has an odd frequency.\nIf yes, return True; otherwise, return False.\nIf yes, return True; otherwise, return False."
  }
]